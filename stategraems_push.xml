<tool id="stategraems_push" name="Save files in STATegra EMS" version="0.1" workflow_compatible="false">
	<description>Automatically annotate and save your Galaxy history files in STATegra EMS.</description>
	<requirements>
		<requirement type="package">requests</requirement>
	</requirements>

	<command interpreter="python">
		##------------------------------------------------------------------------------------
		## This function calculates the associations between the different jobs based on the
		## datasets used as input or output for the jobs.
		##------------------------------------------------------------------------------------
		#def findJobAssociations_HistoryDataset($dataset, $job_associations)
			#if ($use_deleted or $dataset.deleted == False) and ($use_hidden or $dataset.visible == True)
				#for $assoc in $dataset.creating_job_associations
					#set $job_associations[$assoc.job.id] = $assoc.job
				#end for
			#end if
		#end def

		##------------------------------------------------------------------------------------
		## This function calculates the associations between the different jobs based on the
		## collection of datasets used as input or output for the jobs.
		##------------------------------------------------------------------------------------
		#def findJobAssociations_HistoryDatasetCollection($dataset_coll, $job_associations)
			#if ($use_deleted or $dataset_coll.deleted == False) and ($use_hidden or $dataset_coll.visible == True)
				$findJobAssociations_HistoryDatasetCollection_rec($dataset_coll, $job_associations)
			#end if
		#end def

		##------------------------------------------------------------------------------------
		## This function calculates recursively the associations between the different jobs
		## based on the collection of datasets used as input or output for the jobs.
		##------------------------------------------------------------------------------------
		#def findJobAssociations_HistoryDatasetCollection_rec($dataset_coll, $job_associations)
			#for $dataset in $dataset_coll.elements
				#if $dataset.hda
					$findJobAssociations_HistoryDataset($dataset.hda, $job_associations)
				##elif $dataset.ldda
					##		#TODO
					##		$enum_LibraryDatasetAssociation($dataset.ldda, $job_associations)
				#elif $dataset.child_collection
					$findJobAssociations_HistoryDatasetCollection_rec($dataset.child_collection, $job_associations)
				#end if
			#end for
		#end def

		##------------------------------------------------------------------------------------
		## This function creates a new instance of an Input object that will be added to a
		## job instance
		## http://galaxy.readthedocs.io/en/master/_modules/galaxy/model.html#Dataset
		##------------------------------------------------------------------------------------
		#def createInputInstance($jda)
			#set $instance = {}
			#if $jda.dataset
				#set $instance["name"] = str($jda.name)
				#set $instance["id"] = str($__app__.security.encode_id($jda.dataset.id))
				#set $instance["file"] = str($jda.dataset.name)
			#end if
			#return $instance
		#end def

		##------------------------------------------------------------------------------------
		## This function creates a new instance of an Output object that will be added to a
		## job instance
		##------------------------------------------------------------------------------------
		#def createOutputInstance($jda)
			#set $instance = {}
			#if $jda.dataset
				#set $instance["name"] = str($jda.name)
				#set $instance["id"] = str($__app__.security.encode_id($jda.dataset.id))
				#set $instance["file"] = str($jda.dataset.name)
			#end if
			#return $instance
		#end def

		##------------------------------------------------------------------------------------
		## This function creates a new instance of a Parameter object that will be added to a
		## job instance
		##------------------------------------------------------------------------------------
		#def createParameterInstance($parameter_name, $parameter_value)
			##Check if is a dict
			#if isinstance($parameter_value, dict):
				#for $parameter_name_aux, $parameter_value_aux in $parameter_value.items()
					#set $parameterInstance = $createParameterInstance($parameter_name_aux, $parameter_value_aux)
					#if $parameterInstance != ""
						#set $parameter_value[$parameter_name_aux] = $parameterInstance
					#else
						#del $parameter_value[$parameter_name_aux]
					#end if
				#end for
			##Check if is a list
			#else if isinstance($parameter_value, list):
				#set $i = 1
				#set $aux = {}
				#for $parameter_value_aux in $parameter_value
					#set $parameterInstance = $createParameterInstance(str($i), $parameter_value_aux)
					#if $parameterInstance != ""
						#set $aux[$i] = $parameterInstance
						#set $i=$i+1
					#end if
				#end for
				#set $parameter_value = $aux.values()
			##Check if is an object
			#else
				#try
					##Ignore HistoryDatasetAssociation objects and parameters not interesting
					#if ("HistoryDatasetAssociation" in $parameter_value.__class__.__name__) or ($parameter_name.startswith("__")):
						#return ""
					#end if
				#except
					#pass
				#end try

				#set $parameter_value = str($parameter_value)
			#end if

			#set $instance = {"name" : $parameter_name, "value" : $parameter_value}
			#return $instance
		#end def

		##------------------------------------------------------------------------------------
		## This function creates a new instance of Job.
		## http://galaxy.readthedocs.io/en/master/_modules/galaxy/model.html#Job
		##------------------------------------------------------------------------------------
		#def createJobInstance($job)
			#set $instance = {}
			#set $instance["id"] = str($job.id)
			#set $instance["tool_id"] = str($job.tool_id)
			#set $instance["tool_version"] = str($job.tool_version)
			#set $instance["state"] = str($job.state)
			#set $instance["exit_code"] = str($job.exit_code)
			#set $instance["inputs"] = []
			#set $instance["outputs"] = []
			#set $instance["parameters"] = []

			#for $input_dataset in $job.input_datasets
				$instance["inputs"].append($createInputInstance($input_dataset))
			#end for

			#for $output_dataset in $job.output_datasets
				$instance["outputs"].append($createOutputInstance($output_dataset))
			#end for

			#if $job.tool_id != "upload1"
				#set $parameters = $job.get_param_values($__app__)
				#for $parameter_name, $parameter_value in $parameters.items()
					#set $parameter = $createParameterInstance($parameter_name, $parameter_value)
					#if $parameter != ""
						$instance["parameters"].append($parameter)
					#end if
				#end for
			#end if

			#return $instance
		#end def

		##------------------------------------------------------------------------------------
		## Main body of the tool
		##------------------------------------------------------------------------------------
		## First we process the current history and get a table with the metadata for each job
		#set global $history = $output.creating_job.history
		#set global $use_deleted = True
		#set global $use_hidden = True

		#set $job_associations = {}
		#for $dataset in $history.datasets
			$findJobAssociations_HistoryDataset($dataset, $job_associations)
		#end for
		#for $dataset_coll in $history.dataset_collections
			$findJobAssociations_HistoryDatasetCollection($dataset_coll, $job_associations)
		#end for

		## Now we export the table to a string
		#set $job_table={}
		#for $job_id, $job in $job_associations.iteritems()
			#if $job_id != $output.creating_job.id
				#set $job_table[str($job_id)] = $createJobInstance($job)
			#end if
		#end for

		## Set the params for the next Python script
		#set params={}
		##1. STATegra EMS host
		#set params["emshost"] = str($emshost)
		##2. STATegra EMS user
		#set params["emsuser"] = str($emsuser)
		##10. New analysis name
		#set params["emsanalysisname"] = str($emsanalysisname)
		##11. New experiment id
		#set params["emsexperimentid"] = str($emsexperimentid)
		##3. The history ID
		#set params["history_id"] = $__app__.security.encode_id($output.history.id)
		##4. The selected dataset id
		#set params["dataset_id"] = $__app__.security.encode_id('%s' % $fileselection.selectedFiles.id)
		##5. The selected dataset name
		#set params["dataset_name"] = str($fileselection.selectedFiles.name)
		##6. The selected dataset file name
		#set params["file_name"] = str($fileselection.selectedFiles.file_name)
		##7. The selected dataset file format
		#set params["file_format"] = str($output.ext)
		##8. The output file dir for the job
		#set params["output_dir"] = str($output.files_path)
		##9. Current Galaxy user
		#set params["user_name"] = str($__user_name__)


		#import json
		#set $file=open($params["output_dir"] + '.tmp', 'w+')
		$file.write(json.dumps($job_table))
		#set $params=json.dumps($params)

		##Execute the main tool script
		stategraems_push.py '$params'
	</command>

	<inputs>
		<param name="emshost" type="text" value="172.17.0.1:8084" label="STATegra EMS Host" />
		<param name="emsuser" type="text" value="admin" label="Username:" />
		<param name="emsexperimentid" type="text" value="EXP00001" label="Experiment identifier:" />
		<param name="emsanalysisname" type="text" value="My analysis" label="New analysis name:" />
		<section name="fileselection" title="File selection" multiple="true" expanded="True">
			<param format="data" name="selectedFiles" type="data" label="File(s) to annotate:" />
			<conditional name="upload_option">
				<param type="select" display="radio" name="uploadFiles" label="Upload the files? [see help for more information]: ">
					<option value="not_upload">Just send the files description. Do not upload the files.</option>
					<option value="upload">Send the description and the files to STATegra EMS.</option>
				</param>
				<when value="upload">
					<conditional name="upload_selection">
						<param type="select" display="radio" name="uploadSelection" label="Please choose the files to upload [see help for more information]: ">
							<option value="upload_all">All selected files.</option>
							<option value="upload_custom">Let me choose.</option>
						</param>
						<when value="upload_custom">
							<param format="data" name="uploadFilesSelected" type="data" multiple="true" label="File(s) to upload:" />
						</when>
					</conditional>
				</when>
			</conditional>
		</section>
	</inputs>
	<outputs>
		<data name="output" label="${tool.name}: ${fileselection.selectedFiles.file_name}" auto_format="true" />
	</outputs>

	<help>
=======================
Send to STATegra EMS
=======================

**What it does**

Use this tool to automatically annotate your current history in a STATegra EMS instance.
The tool generates the *file provenance* for each selected file based on the current history and sends it to STATegra EMS, which will create a new Analysis instance associated to the selected Experiment.
This Analysis instance will describe the complete process followed to generate the selected files.
In addition, files can be stored in the corresponding Experiment data directory.
--------

**How to use**

TODO

-----

**Author**: Rafael Hernández de Diego [SLU Global Bioinformatics Centre]

Sources are available at https://github.com/fikipollo/stategraems-galaxy

	</help>
</tool>
